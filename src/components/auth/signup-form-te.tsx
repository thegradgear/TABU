
"use client";

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { auth, db } from '@/lib/firebase';
import { RecaptchaVerifier, signInWithPhoneNumber, ConfirmationResult, createUserWithEmailAndPassword, fetchSignInMethodsForEmail } from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import { useRouter } from 'next/navigation';
import { useToast } from '@/hooks/use-toast';
import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';

// =================================================================================
// üî• ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Æ‡±à‡∞® ‡∞´‡±à‡∞∞‡±ç‚Äå‡∞¨‡±á‡∞∏‡±ç ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±á‡∞∑‡∞®‡±ç ‡∞ó‡∞Æ‡∞®‡∞ø‡∞ï üî•
// =================================================================================
// `auth/captcha-check-failed` ‡∞≤‡±á‡∞¶‡∞æ `auth/internal-error` ‡∞≤‡±ã‡∞™‡∞Ç ‡∞Ö‡∞Ç‡∞ü‡±á ‡∞´‡±à‡∞∞‡±ç‚Äå‡∞¨‡±á‡∞∏‡±ç
// ‡∞Æ‡±Ä ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞®‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å ‡∞≤‡±á‡∞®‡∞ø ‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞Ç‡∞¶‡±Å‡∞® ‡∞®‡∞ø‡∞∞‡±ã‡∞ß‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø.
//
// ‡∞¶‡±Ä‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø:
// 1. ‡∞Æ‡±Ä ‡∞¨‡±ç‡∞∞‡±å‡∞ú‡∞∞‡±ç ‡∞°‡±Ü‡∞µ‡∞≤‡∞™‡∞∞‡±ç ‡∞ï‡∞®‡±ç‡∞∏‡±ã‡∞≤‡±ç ‡∞§‡±Ü‡∞∞‡∞µ‡∞Ç‡∞°‡∞ø (‡∞ï‡±Å‡∞°‡∞ø-‡∞ï‡±ç‡∞≤‡∞ø‡∞ï‡±ç -> ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä -> ‡∞ï‡∞®‡±ç‡∞∏‡±ã‡∞≤‡±ç).
// 2. ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶ ‡∞≤‡∞æ‡∞ó‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞® ‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç ‡∞™‡±á‡∞∞‡±Å‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞Ç‡∞°‡∞ø (‡∞â‡∞¶‡∞æ., "localhost" ‡∞≤‡±á‡∞¶‡∞æ ‡∞í‡∞ï ‡∞™‡±ä‡∞°‡∞µ‡±à‡∞® ‡∞ï‡±ç‡∞≤‡±å‡∞°‡±ç URL).
// 3. ‡∞Æ‡±Ä ‡∞´‡±à‡∞∞‡±ç‚Äå‡∞¨‡±á‡∞∏‡±ç ‡∞ï‡∞®‡±ç‡∞∏‡±ã‡∞≤‡±ç‚Äå‡∞ï‡±Å ‡∞µ‡±Ü‡∞≥‡±ç‡∞≤‡∞Ç‡∞°‡∞ø: https://console.firebase.google.com/
// 4. ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞æ‡∞ú‡±Ü‡∞ï‡±ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.
// 5. "Authentication" -> "Settings" -> "Authorized domains"‡∞ï‡±Å ‡∞µ‡±Ü‡∞≥‡±ç‡∞≤‡∞Ç‡∞°‡∞ø.
// 6. "Add domain" ‡∞ï‡±ç‡∞≤‡∞ø‡∞ï‡±ç ‡∞ö‡±á‡∞∏‡∞ø, ‡∞Æ‡±Ä ‡∞ï‡∞®‡±ç‡∞∏‡±ã‡∞≤‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç‚Äå‡∞®‡±Å ‡∞Ö‡∞§‡∞ø‡∞ï‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.
// =================================================================================

declare global {
  interface Window {
    recaptchaVerifier?: RecaptchaVerifier;
    confirmationResult?: ConfirmationResult;
  }
}

const FAKE_EMAIL_DOMAIN = "@sanghika.samakhya";

export default function SignupFormTe() {
  const router = useRouter();
  const { toast: shadToast } = useToast();
  const [loading, setLoading] = useState(false);
  const [otpSent, setOtpSent] = useState(false);
 
  const [formData, setFormData] = useState({
    fullName: '',
    phone: '',
    otp: '',
    password: '',
    confirmPassword: '',
    address: '',
    city: '',
    state: '',
    country: '‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç',
    pin: '',
  });

  useEffect(() => {
    if (typeof window !== 'undefined') {
      console.log('================================================================================');
      console.log('üî• ‡∞´‡±à‡∞∞‡±ç‚Äå‡∞¨‡±á‡∞∏‡±ç ‡∞™‡±ç‡∞∞‡∞æ‡∞Æ‡∞æ‡∞£‡±Ä‡∞ï‡∞∞‡∞£ ‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç:', window.location.hostname);
      console.log("‡∞™‡±à ‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç‚Äå‡∞®‡±Å ‡∞Æ‡±Ä ‡∞´‡±à‡∞∞‡±ç‚Äå‡∞¨‡±á‡∞∏‡±ç ‡∞ï‡∞®‡±ç‡∞∏‡±ã‡∞≤‡±ç -> Authentication -> Settings -> Authorized domains‡∞ï‡±Å ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø");
      console.log('================================================================================');
    }
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData(prev => ({...prev, [id]: value}));
  };


  const handleSendOtp = async (event: React.FormEvent) => {
    event.preventDefault();
    setLoading(true);

    if (!/^[6-9]\d{9}$/.test(formData.phone)) {
        toast.error('‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡±Å‡∞¨‡∞æ‡∞ü‡±Å ‡∞Ö‡∞Ø‡±ç‡∞Ø‡±á 10-‡∞Ö‡∞Ç‡∞ï‡±Ü‡∞≤ ‡∞≠‡∞æ‡∞∞‡∞§‡±Ä‡∞Ø ‡∞´‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.');
        setLoading(false);
        return;
    }
    
    try {
      const email = `${formData.phone}${FAKE_EMAIL_DOMAIN}`;
      const signInMethods = await fetchSignInMethodsForEmail(auth, email);

      if (signInMethods.length > 0) {
        toast.error('‡∞à ‡∞´‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç‚Äå‡∞§‡±ã ‡∞ñ‡∞æ‡∞§‡∞æ ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞â‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.');
        router.push('/te/login');
        setLoading(false);
        return;
      }

      const appVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', {
          'size': 'invisible',
          'callback': (response: any) => {
              // reCAPTCHA solved, allow signInWithPhoneNumber.
          }
      });
      
      const fullPhoneNumber = `+91${formData.phone}`;
      window.confirmationResult = await signInWithPhoneNumber(auth, fullPhoneNumber, appVerifier);
      setOtpSent(true);
      toast.success('OTP ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞™‡∞Ç‡∞™‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!');
    } catch (error: any) {
      console.error("Error sending OTP:", error);
      let errorMessage = 'OTP ‡∞™‡∞Ç‡∞™‡∞°‡∞Ç‡∞≤‡±ã ‡∞µ‡∞ø‡∞´‡∞≤‡∞Æ‡±à‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.';
       if (error.code === 'auth/captcha-check-failed' || error.code === 'auth/internal-error') {
          errorMessage = "‡∞ö‡∞∞‡±ç‡∞Ø ‡∞µ‡∞ø‡∞´‡∞≤‡∞Æ‡±à‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç (‡∞â‡∞¶‡∞æ., 'localhost') ‡∞´‡±à‡∞∞‡±ç‚Äå‡∞¨‡±á‡∞∏‡±ç ‡∞ï‡∞®‡±ç‡∞∏‡±ã‡∞≤‡±ç ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï ‡∞™‡±ç‡∞∞‡∞æ‡∞Æ‡∞æ‡∞£‡±Ä‡∞ï‡∞∞‡∞£ ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞≤‡∞≤‡±ã ‡∞Ö‡∞ß‡±Ä‡∞ï‡±É‡∞§‡∞Ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞®‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.";
      } else if (error.code === 'auth/too-many-requests') {
          errorMessage = '‡∞ö‡∞æ‡∞≤‡∞æ ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞≤‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.';
      }
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleSignup = async (event: React.FormEvent) => {
    event.preventDefault();
     if (formData.password !== formData.confirmPassword) {
        toast.error("‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç‚Äå‡∞≤‡±Å ‡∞∏‡∞∞‡∞ø‡∞™‡±ã‡∞≤‡∞°‡∞Ç ‡∞≤‡±á‡∞¶‡±Å.");
        return;
    }
    setLoading(true);

    try {
        const confirmationResult = window.confirmationResult;
        if (!confirmationResult) {
            throw new Error("OTP ‡∞ß‡±É‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.");
        }

        await confirmationResult.confirm(formData.otp);
        
        const email = `${formData.phone}${FAKE_EMAIL_DOMAIN}`;
        const userCredential = await createUserWithEmailAndPassword(auth, email, formData.password);
        const user = userCredential.user;

        const nameParts = formData.fullName.trim().split(' ');
        const firstName = nameParts[0] || '';
        const lastName = nameParts.slice(1).join(' ') || '';

        await setDoc(doc(db, "users", user.uid), {
            firstName: firstName,
            lastName: lastName,
            phone: formData.phone,
            address: `${formData.address}, ${formData.city}, ${formData.state}, ${formData.country} - ${formData.pin}`,
            createdAt: new Date(),
            subscription: {
                status: 'not subscribed',
            },
            email: '' // Add email field
        });
        
        // No toast here, redirect will show it
        router.push('/te/login?registered=true');

    } catch (error: any)        {
        console.error("Signup Error:", error);
        
        if (error.code === 'auth/email-already-in-use') {
            shadToast({
                title: "‡∞ñ‡∞æ‡∞§‡∞æ ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞â‡∞Ç‡∞¶‡∞ø",
                description: "‡∞à ‡∞´‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞¨‡∞¶‡±Å‡∞≤‡±Å‡∞ó‡∞æ ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
                variant: "destructive",
            });
            router.push('/te/login');
        } else {
            let errorMessage = "‡∞§‡±Ü‡∞≤‡∞ø‡∞Ø‡∞®‡∞ø ‡∞≤‡±ã‡∞™‡∞Ç ‡∞∏‡∞Ç‡∞≠‡∞µ‡∞ø‡∞Ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø.";
            if (error.code === 'auth/invalid-verification-code') {
                errorMessage = "OTP ‡∞§‡∞™‡±ç‡∞™‡±Å‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.";
            } else if (error.code === 'auth/code-expired') {
                errorMessage = "OTP ‡∞ó‡∞°‡±Å‡∞µ‡±Å ‡∞Æ‡±Å‡∞ó‡∞ø‡∞∏‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ï‡±ä‡∞§‡±ç‡∞§‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.";
            }
            shadToast({
                title: "‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞µ‡∞ø‡∞´‡∞≤‡∞Æ‡±à‡∞Ç‡∞¶‡∞ø",
                description: errorMessage,
                variant: "destructive",
            });
        }
    } finally {
        setLoading(false);
    }
  }


  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-14rem)] bg-background px-4 py-12">
      <Card className="mx-auto max-w-2xl w-full shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl font-headline">‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞ñ‡∞æ‡∞§‡∞æ‡∞®‡±Å ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø</CardTitle>
          <CardDescription>
            ‡∞ñ‡∞æ‡∞§‡∞æ‡∞®‡±Å ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.
          </CardDescription>
        </CardHeader>
        <CardContent>
            <form className="grid gap-4" onSubmit={otpSent ? handleSignup : handleSendOtp}>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="grid gap-2">
                      <Label htmlFor="fullName">‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å</Label>
                      <Input id="fullName" placeholder="‡∞™‡±á‡∞∞‡±Å ‡∞á‡∞Ç‡∞ü‡∞ø‡∞™‡±á‡∞∞‡±Å" required onChange={handleInputChange} value={formData.fullName} disabled={otpSent}/>
                  </div>
                  <div className="grid gap-2">
                      <Label htmlFor="phone">‡∞´‡±ã‡∞®‡±ç</Label>
                      <Input id="phone" type="tel" placeholder="9876543210" required onChange={handleInputChange} value={formData.phone} disabled={otpSent}/>
                  </div>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="address">‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ</Label>
                <Input id="address" placeholder="11-2-333, ‡∞≤‡±ç‡∞Ø‡∞æ‡∞Ç‡∞°‡±ç‚Äå‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±ç" required onChange={handleInputChange} value={formData.address} disabled={otpSent}/>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="grid gap-2">
                      <Label htmlFor="city">‡∞®‡∞ó‡∞∞‡∞Ç</Label>
                      <Input id="city" placeholder="‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç" required onChange={handleInputChange} value={formData.city} disabled={otpSent}/>
                  </div>
                  <div className="grid gap-2">
                      <Label htmlFor="state">‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞‡∞Ç</Label>
                      <Input id="state" placeholder="‡∞§‡±Ü‡∞≤‡∞Ç‡∞ó‡∞æ‡∞£" required onChange={handleInputChange} value={formData.state} disabled={otpSent}/>
                  </div>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="grid gap-2">
                      <Label htmlFor="country">‡∞¶‡±á‡∞∂‡∞Ç</Label>
                      <Input id="country" placeholder="‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç" required onChange={handleInputChange} value={formData.country} disabled={true}/>
                  </div>
                  <div className="grid gap-2">
                      <Label htmlFor="pin">‡∞™‡∞ø‡∞®‡±ç</Label>
                      <Input id="pin" placeholder="500089" required onChange={handleInputChange} value={formData.pin} disabled={otpSent}/>
                  </div>
              </div>
              
              {otpSent && (
                <>
                    <div className="grid gap-2">
                        <Label htmlFor="otp">OTP‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø</Label>
                        <Input id="otp" type="text" placeholder="123456" required onChange={handleInputChange} value={formData.otp} maxLength={6} />
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div className="grid gap-2">
                            <Label htmlFor="password">‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç</Label>
                            <Input id="password" type="password" required onChange={handleInputChange} value={formData.password} />
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="confirmPassword">‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç‚Äå‡∞®‡±Å ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø</Label>
                            <Input id="confirmPassword" type="password" required onChange={handleInputChange} value={formData.confirmPassword} />
                        </div>
                    </div>
                </>
              )}
              
              <div id="recaptcha-container"></div>
              
              <Button type="submit" className="w-full bg-primary text-primary-foreground hover:bg-primary/90" disabled={loading}>
                {otpSent
                    ? (loading ? '‡∞ñ‡∞æ‡∞§‡∞æ ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø...' : '‡∞ñ‡∞æ‡∞§‡∞æ‡∞®‡±Å ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø')
                    : (loading ? 'OTP ‡∞™‡∞Ç‡∞™‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø...' : 'OTP ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø')
                }
              </Button>
            </form>
          <div className="mt-4 text-center text-sm">
            ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞ñ‡∞æ‡∞§‡∞æ ‡∞â‡∞Ç‡∞¶‡∞æ?{' '}
            <Link href="/te/login" className="underline hover:text-primary">
              ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
